Debugging in Chrome

        1.Source panel
          => The File Navigator pane lists HTML, JavaScript, CSS and other files, including images that are attached to the page. Chrome extensions may appear here too.
          => The Code Editor pane shows the source code.
          => The JavaScript Debugging pane is for debugging, we’ll explore it soon.
        2.console
          =>We can type commands there and press Enter to execute.
          like,
            1+2
            result:3

        3.There are three main ways to pause a script:

            1.A breakpoint.
             =>  A breakpoint is a point of code where the debugger will automatically pause the JavaScript execution.
             =>  While the code is paused, we can examine current variables, execute commands in the console etc. 
                  In other words, we can debug it.

            2.The debugger statements.
                 =>That’s very convenient when we are in a code editor and don’t want to switch to the browser and look up the script in developer tools to set the breakpoint.
          
            3.An error (if dev tools are open and the button  is “on”).
                 => “Resume”: continue the execution, hotkey F8.
                 => “Step”: run the next command, hotkey F9.
                 => “Step over”: run the next command, but don’t go into a function, hotkey F10.
                 => “Step into”, hotkey F11.
                 => “Step out”: continue the execution till the end of the current function, hotkey Shift+F11.

         4.Pause and look around
                  => Watch – shows current values for any expressions.
                  => Call Stack – shows the nested calls chain.
                  => Scope – current variables.
                        Local shows local function variables. You can also see their values highlighted right over the source.
                        Global has global variables (out of any functions). 
    
        5.logging
             =>If we have enough logging in our code, then we can see what’s going on from the records, without the debugger.
        
