OBJECTS:
  => objects are used to store keyed collections of various data and more complex entities. 
  =>An object can be created with figure brackets {…} with an optional list of properties. A property is a “key: value” pair, where key is a string (also called a “property name”), and value can be anything.
  =>Usually, the figure brackets {...} are used. That declaration is called an object literal.
Comma 
  =>The last property in the list may end with a comma:
        That is called a “trailing” or “hanging” comma. Makes it easier to add/remove/move around properties, because all lines become alike.       
Const  
  =>Please note: an object declared as const can be modified.

Square brackets  
  =>For multiword properties, the dot access doesn’t work:
    eg.,
      user.likes birds = true     //worng
      user["likes birds"] = true; //correct

Computed properties    
     eg.,
        let fruit = 'apple';
        let bag = {
        [fruit + 'Computers']: 5 // bag.appleComputers = 5
        };

Property value shorthand
    => properties have the same names as variables. 
            eg.,
                function makeUser(name, age) {
                return {
                    name: name,
                    age: age,
                    // ...other properties
                };
                }

                let user = makeUser("John", 30);
                alert(user.name); // John
            
            => Instead of name:name we can just write name, like this

                    function makeUser(name, age) {
                    return {
                        name, // same as name: name
                        age,  // same as age: age
                        // ...
                    };
                    }

Property names limitations
        =>As we already know, a variable cannot have a name equal to one of language-reserved words like “for”, “let”, “return” etc.
        =>But for an object property, there’s no such restriction
        =>In short, there are no limitations on property names. They can be any strings or symbols (a special type for identifiers, to be covered later).
        =>Other types are automatically converted to strings.
           For instance,
               a number 0 becomes a string "0" when used as a property key

Property existence test, “in” operator
        =>Please note that on the left side of in there must be a property name. That’s usually a quoted string.
        =>If we omit quotes, that means a variable, it should contain the actual name to be tested. 

  It’s when an object property exists, but stores undefined:

            let obj = {
            test: undefined
            };

            alert( obj.test ); // it's undefined, so - no such property?

            alert( "test" in obj ); // true, the property does exist!

The “for…in” loop
       => there exists a special form of the loop: for..in. 
         For instance,
             let’s output all properties of user:

                let user = {
                    name: "John",
                    age: 30,
                    isAdmin: true
                    };

                    for (let key in user) {
                    // keys
                    alert( key );  // name, age, isAdmin
                    // values for the keys
                    alert( user[key] ); // John, 30, true
                    }

Ordered like an object
     =>if the keys are non-integer, then they are listed in the creation order
     =>“49” is an integer property name, because when it’s transformed to an integer number and back, it’s still the same. But “+49” and “1.2” are not
     =>So, to fix the issue with the phone codes, we can “cheat” by making the codes non-integer. Adding a plus "+" sign before each code is enough.


